import React, { useState } from 'react';
import './MeetingForm.css';

const MeetingForm = ({ onSubmit }) => {
  const [meetingUrl, setMeetingUrl] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [isFinished, setIsFinished] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsProcessing(true);

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Mock data for testing without backend
      const mockTranscriptData = {
        transcript: `# Weekly Team Standup Meeting

## Meeting Overview
**Date:** ${new Date().toLocaleDateString()}
**Duration:** 45 minutes
**Participants:** 8 team members

## Agenda Items Discussed

### 1. Project Status Updates
- **Frontend Development:** React components are 80% complete
- **Backend API:** Core endpoints implemented and tested
- **Database Schema:** Finalized and ready for production
- **Mobile App:** UI/UX design phase completed

### 2. Technical Challenges
- **Performance Optimization:** Identified bottlenecks in data loading
- **Cross-browser Compatibility:** Issues with Safari on iOS devices
- **API Rate Limiting:** Need to implement proper throttling
- **Security Audit:** Penetration testing scheduled for next week

### 3. Sprint Planning
- **Sprint 15 Goals:**
  - Complete user authentication system
  - Implement real-time notifications
  - Add advanced search functionality
  - Optimize database queries

### 4. Team Collaboration
- **Code Review Process:** Implemented mandatory peer reviews
- **Documentation:** Updated API documentation
- **Knowledge Sharing:** Weekly tech talks scheduled
- **Remote Work:** Team adapting well to hybrid model

## Action Items

### High Priority
1. **John Smith:** Fix Safari compatibility issues by Friday
2. **Sarah Johnson:** Complete authentication system by EOD
3. **Mike Chen:** Review and approve pull requests

### Medium Priority
1. **Lisa Wang:** Update user documentation
2. **David Brown:** Set up monitoring alerts
3. **Emma Davis:** Prepare demo for stakeholders

### Low Priority
1. **Alex Turner:** Research new testing frameworks
2. **Team:** Schedule team building activity

## Decisions Made

### Technical Decisions
- **Framework Choice:** Decided to stick with React for frontend
- **Database:** PostgreSQL confirmed as primary database
- **Deployment:** AWS chosen for cloud infrastructure
- **CI/CD:** GitHub Actions approved for automation

### Process Decisions
- **Code Reviews:** Required for all changes
- **Testing:** Minimum 80% code coverage required
- **Documentation:** All APIs must be documented
- **Meetings:** Standup moved to 10:00 AM daily

## Next Steps

### Immediate (This Week)
- Complete authentication system
- Fix critical bugs
- Prepare for stakeholder demo

### Short Term (Next 2 Weeks)
- Launch beta version
- Conduct user testing
- Implement feedback

### Long Term (Next Month)
- Production release
- Marketing campaign
- Customer support setup

## Notes
- Team morale is high despite challenging deadlines
- Communication has improved significantly
- Remote collaboration tools working well
- Stakeholder feedback has been positive

## Questions & Concerns
- Need clarification on budget allocation
- Timeline might be tight for production release
- Consider hiring additional QA engineer

---
*Meeting minutes generated by PeakNote AI Assistant*
*Generated on: ${new Date().toLocaleString()}*`
      };

      // Structure the data to match what the app expects
      const formattedData = {
        meetingUrl,
        template: 'Smart Mode(AI Driven)',
        notes: mockTranscriptData, // Changed from 'transcript' to 'notes' to match MeetingMinutes expectation
        generatedAt: new Date().toISOString()
      };

      onSubmit(formattedData);
    } catch (error) {
      console.error('Error generating meeting transcript:', error);
      alert('Failed to generate meeting transcript. Please try again.');
    } finally {
      setIsProcessing(false);
      setIsFinished(true);
    }
  };

  const handleUrlChange = (e) => {
    setMeetingUrl(e.target.value);
    setIsFinished(false);
  };

  return (
    <div className="card shadow p-4 meeting-form-container">
      <form onSubmit={handleSubmit}>
        <div className="mb-3 row">
          <div className="col-md-8">
            <input
              type="url"
              className="form-control"
              id="teams-url"
              placeholder="Enter Teams meeting URL (optional for demo)"
              value={meetingUrl}
              onChange={handleUrlChange}
            />
          </div>
          <div className="col-md-4">
            <input
              type="text"
              className="form-control"
              id="template-select"
              value="    Smart Mode(AI Driven)"
              readOnly
            />
          </div>
        </div>
        <button
          type="submit"
          className={`btn btn-primary${isProcessing ? ' btn-processing' : ''}${isFinished ? ' btn-finished' : ''}`}
          disabled={isProcessing}
        >
          <span style={{ position: 'relative', zIndex: 2 }}>
            {isProcessing ? 'Generating...' : 'Generate Notes'}
          </span>
        </button>
      </form>
    </div>
  );
};

export default MeetingForm;
